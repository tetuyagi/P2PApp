#include "rudpsessionserver.h"

//SessionData class
SessionData::SessionData(QString name, Address address)
    :name(name), address(address)
{
    state = State::NONE;
}

const QString SessionData::name() const{
    return name;
}

const Address SessionData::address() const{
    return address;
}

const SessionData::State SessionData::state() const{
    return state;
}

void SessionData::setSate(State state){
    this->state = state;
}


//SessionMessage class
SessionMessage::SessionMessage(){
    
}

SessionMessage SessionMessage::parseMessage(QByteArray byteArray){
    
}                               

QByteArray SessionMessage::makeMessage(MessageType messageType){
    
}


//RudpSessionServer class
RudpSessionServer::RudpSessionServer(int port, QHostAddress host, QObject *parent)
    :QObject(parent)
{
    server = new RudpServer(port, host, this);
}

RudpSessionServer::~RudpSessionServer(){
    delete server;
}

const QString RudpSessionServer::name() const{
    return name;
}

void RudpSessionServer::startSession(SessionData session){
    if(sessionMap.contains(session.address)){
        if(session.state() == (SessionData::NONE || SessionData::DISCONNECTED)){
            break;
        }else{
            qDebug() << "not ready to start session";
            return;
        }
        
    }else{
        sessionMap.insert(session.address, &session);
        connect(server, SIGNAL(receivedData(Address, QByteArray)), this, SLOT(processSession(Address, QByteArray)));
    }
    
    session.setState(SessionData::CONNECTING);
    QByteArray message("make session");
    server->sendDatagram(message, session.port, session.address);    
}

void RudpSessionServer::stopSession(SessionData session){

}

void RudpSessionServer::update(){
    for(int i=0; i<sessionMap.keys().length(); ++i){
        Address address = sessionMap.keys()[i];
        SessionData session = sessionMap.value(address);
        if(session.state() == SessionData::CONNECTED){
            //keep alive check
            if(session.needKeepAlive()){
                //keep alive
                keepAlive(session);
            }
        }
    }
}

void RudpSessionServer::receiveMessage(Address address, QByteArrau byteArray){
    for(int i=0; i<sessionMap.keys().length(); ++i){
         Addree address = sessionMap.keys()[i];
         SessionData session = sessionMap.value(address);
         processMessage(session, byteArray);
     }

}

void RudpSessionServer::processMessage(SessionData session, QByteArray byteArray){
    SessionData::SessionMessage sessionMessage = SessionData::SessionMessage::parseMessage(byteArray); 
    
    
    
    switch(session.state()){
    case SessionData::DISCONNECTED:
        
        QByteArray message("repply message");
        server->sendDatagram(message, session.address.port, session.address.host);
        break;
        
    case SessionData::CONNECTING:
        
    case SessionData::CONNECTED:
        
        
    } 
}
